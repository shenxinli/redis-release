name: Redis Release

on:
  workflow_dispatch:
    inputs:
      redis_version:
        description: 'Redis version to download'
        type: choice
        options:
          - '5'
          - '6'
          - '7'
        default: '7'
        required: true
      platforms:
        description: 'Platforms to build (comma-separated)'
        default: 'linux/amd64,linux/arm64,windows/x64'
        required: true

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.generate_tag.outputs.release_tag }}
    steps:
      - name: Generate release tag
        id: generate_tag
        run: |
          VERSION="${{ github.event.inputs.redis_version }}"
          DATE=$(date +%Y%m%d)
          SHA=$(git rev-parse --short HEAD)
          TAG="redis-v${VERSION}-${DATE}-${SHA}"
          echo "release_tag=$TAG" >> $GITHUB_ENV
          echo "::set-output name=release_tag::$TAG"

  build-linux:
    runs-on: ${{ matrix.os }}
    needs: generate-tag
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            platform: linux/amd64
          - os: ubuntu-20.04
            arch: arm64
            platform: linux/arm64
      fail-fast: false

    steps:
      - name: Check if platform is enabled
        id: check_platform
        run: |
          if [[ ",${{ github.event.inputs.platforms }}," == *",${{ matrix.platform }},"* ]]; then
            echo "platform_enabled=true" >> $GITHUB_ENV
          else
            echo "platform_enabled=false" >> $GITHUB_ENV
          fi

      - name: Set up QEMU (for ARM64)
        if: env.platform_enabled == 'true' && matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Python
        if: env.platform_enabled == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        if: env.platform_enabled == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y make gcc

      - name: Download and compile Redis
        if: env.platform_enabled == 'true'
        run: |
          REDIS_VERSION=${{ github.event.inputs.redis_version }}
          ARCH=${{ matrix.arch }}
          
          # Create build directory
          mkdir -p redis-build
          cd redis-build
          
          # Download Redis source
          wget https://download.redis.io/releases/redis-${REDIS_VERSION}.0.tar.gz
          tar xzf redis-${REDIS_VERSION}.0.tar.gz
          cd redis-${REDIS_VERSION}.0
          
          # Compile Redis with appropriate architecture
          if [ "$ARCH" = "arm64" ]; then
            make -j$(nproc) CC=aarch64-linux-gnu-gcc
          else
            make -j$(nproc)
          fi
          
          # Create binary tarball
          BIN_DIR="redis-${REDIS_VERSION}-linux-${ARCH}"
          mkdir -p $BIN_DIR/bin
          
          # Copy binaries
          cp src/redis-server src/redis-cli src/redis-benchmark src/redis-check-rdb src/redis-check-aof $BIN_DIR/bin/
          
          # Create tarball
          tar czf ../${BIN_DIR}.tar.gz $BIN_DIR
          
          # Move tarball to root
          mv ../${BIN_DIR}.tar.gz ../../
          
          # Cleanup
          cd ../..
          rm -rf redis-build
          
          echo "FILE_NAME=${BIN_DIR}.tar.gz" >> $GITHUB_ENV

      - name: Upload artifact
        if: env.platform_enabled == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: redis-${{ github.event.inputs.redis_version }}-${{ matrix.platform }}
          path: ${{ env.FILE_NAME }}

  build-windows:
    runs-on: windows-latest
    needs: generate-tag
    steps:
      - name: Check if platform is enabled
        id: check_platform
        run: |
          $platforms = "${{ github.event.inputs.platforms }}".Split(',')
          if ($platforms -contains "windows/x64") {
            echo "platform_enabled=true" >> $env:GITHUB_ENV
          } else {
            echo "platform_enabled=false" >> $env:GITHUB_ENV
          }

      - name: Download Windows Redis
        if: env.platform_enabled == 'true'
        run: |
          $REDIS_VERSION = "${{ github.event.inputs.redis_version }}"
          $FILENAME = "redis-$REDIS_VERSION-windows-x64.zip"
          $URL = "https://github.com/tporadowski/redis/releases/download/v$($REDIS_VERSION).0.0/Redis-x64-$($REDIS_VERSION).0.0.zip"
          
          Write-Host "Downloading $URL to $FILENAME"
          
          try {
              Invoke-WebRequest -Uri $URL -OutFile $FILENAME
              Write-Host "Download complete: $FILENAME"
          } catch {
              Write-Host "Failed to download: $URL"
              Write-Host $_.Exception.Message
              exit 1
          }
          
          echo "FILE_NAME=$FILENAME" >> $env:GITHUB_ENV

      - name: Upload artifact
        if: env.platform_enabled == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: redis-${{ github.event.inputs.redis_version }}-windows-x64
          path: ${{ env.FILE_NAME }}

  release:
    runs-on: ubuntu-latest
    needs: [generate-tag, build-linux, build-windows]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.generate-tag.outputs.release_tag }}
          release_name: Redis Release ${{ needs.generate-tag.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          
          # Find all downloaded files
          for FILE in $(find . -type f -name "redis-*"); do
            # Get the actual filename without the directory path
            FILENAME=$(basename "$FILE")
            
            echo "Uploading asset: $FILENAME"
            
            # Get the release upload URL
            UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/tags/${{ needs.generate-tag.outputs.release_tag }}" | \
              jq -r '.upload_url' | sed -e 's/{?name,label}//')
            
            # Upload the asset
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              "$UPLOAD_URL?name=$FILENAME" \
              --data-binary "@$FILE"
          done
  